
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  passwordHash: 'passwordHash',
  role: 'role',
  avatar: 'avatar',
  city_id: 'city_id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GigScalarFieldEnum = {
  id: 'id',
  gigTitle: 'gigTitle',
  category: 'category',
  shortDescription: 'shortDescription',
  thumbnailImage: 'thumbnailImage',
  galleryImages: 'galleryImages',
  price: 'price',
  deliveryTime: 'deliveryTime',
  revisions: 'revisions',
  additionalNotes: 'additionalNotes',
  createdAt: 'createdAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  image: 'image',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  country: 'country',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SkillScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  type: 'type',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SpecialtyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category_id: 'category_id',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.JobPostScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  summary: 'summary',
  description: 'description',
  deliverables: 'deliverables',
  category_id: 'category_id',
  specialty: 'specialty',
  city_id: 'city_id',
  budget_type: 'budget_type',
  hourly_rate_from: 'hourly_rate_from',
  hourly_rate_to: 'hourly_rate_to',
  fixed_price: 'fixed_price',
  project_type: 'project_type',
  duration: 'duration',
  hours_per_week: 'hours_per_week',
  job_size: 'job_size',
  freelancers_needed: 'freelancers_needed',
  experience_level: 'experience_level',
  mandatory_skills: 'mandatory_skills',
  nice_to_have_skills: 'nice_to_have_skills',
  tools: 'tools',
  languages: 'languages',
  regular_price: 'regular_price',
  job_type: 'job_type',
  thumb_image: 'thumb_image',
  buyer_id: 'buyer_id',
  status: 'status',
  approved_by_admin: 'approved_by_admin',
  featured: 'featured',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.JobApplicationScalarFieldEnum = {
  id: 'id',
  job_post_id: 'job_post_id',
  freelancer_id: 'freelancer_id',
  cover_letter: 'cover_letter',
  proposed_price: 'proposed_price',
  delivery_time: 'delivery_time',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  client: 'client',
  freelancer: 'freelancer',
  admin: 'admin'
};

exports.Prisma.ModelName = {
  User: 'User',
  Gig: 'Gig',
  Category: 'Category',
  City: 'City',
  Skill: 'Skill',
  Specialty: 'Specialty',
  JobPost: 'JobPost',
  JobApplication: 'JobApplication'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/saif/FYP/Freelancing-Platform/backend/node_modules/@prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/saif/FYP/Freelancing-Platform/backend/prisma/schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.3",
  "engineVersion": "bb420e667c1820a8c05a38023385f6cc7ef8e83a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nenum Role {\n  client\n  freelancer\n  admin\n}\n\nmodel User {\n  id           String   @id @default(cuid())\n  name         String\n  email        String   @unique\n  passwordHash String\n  role         Role     @default(client)\n  avatar       String?\n  city_id      Int?\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n\n  // Relations\n  city             City?            @relation(fields: [city_id], references: [id])\n  job_posts        JobPost[]        @relation(\"BuyerJobPosts\")\n  job_applications JobApplication[] @relation(\"FreelancerApplications\")\n}\n\nmodel Gig {\n  id               Int      @id @default(autoincrement())\n  gigTitle         String\n  category         String\n  shortDescription String\n  thumbnailImage   String?\n  galleryImages    String[] // Postgres supports arrays\n  price            Float\n  deliveryTime     Int // Changed to Int\n  revisions        Int // Changed to Int\n  additionalNotes  String?\n  createdAt        DateTime @default(now())\n}\n\nmodel Category {\n  id          Int      @id @default(autoincrement())\n  name        String\n  slug        String   @unique\n  description String?\n  image       String?\n  status      String   @default(\"active\") // active, inactive\n  created_at  DateTime @default(now())\n  updated_at  DateTime @updatedAt\n\n  // Relations\n  job_posts   JobPost[]\n  specialties Specialty[]\n\n  @@map(\"categories\")\n}\n\nmodel City {\n  id         Int      @id @default(autoincrement())\n  name       String\n  country    String?\n  status     String   @default(\"active\") // active, inactive\n  created_at DateTime @default(now())\n  updated_at DateTime @updatedAt\n\n  // Relations\n  job_posts JobPost[]\n  users     User[]\n\n  @@unique([name, country])\n  @@map(\"cities\")\n}\n\nmodel Skill {\n  id         Int      @id @default(autoincrement())\n  name       String   @unique\n  category   String // Programming Languages, Frameworks, Tools, etc.\n  type       String   @default(\"skill\") // skill, tool, language\n  status     String   @default(\"active\")\n  created_at DateTime @default(now())\n  updated_at DateTime @updatedAt\n\n  @@map(\"skills\")\n}\n\nmodel Specialty {\n  id          Int      @id @default(autoincrement())\n  name        String\n  category_id Int\n  status      String   @default(\"active\")\n  created_at  DateTime @default(now())\n  updated_at  DateTime @updatedAt\n\n  // Relations\n  category Category @relation(fields: [category_id], references: [id])\n\n  @@unique([name, category_id])\n  @@map(\"specialties\")\n}\n\nmodel JobPost {\n  id           Int     @id @default(autoincrement())\n  title        String\n  slug         String  @unique\n  summary      String? @db.Text\n  description  String  @db.Text\n  deliverables String? @db.Text\n  category_id  Int\n  specialty    String?\n  city_id      Int?\n\n  // Budget Information\n  budget_type      String   @default(\"hourly\") // hourly, fixed\n  hourly_rate_from Decimal? @db.Decimal(10, 2)\n  hourly_rate_to   Decimal? @db.Decimal(10, 2)\n  fixed_price      Decimal? @db.Decimal(10, 2)\n\n  // Project Details\n  project_type       String  @default(\"one-time\") // one-time, ongoing\n  duration           String? // 1-3 months, 3-6 months, etc.\n  hours_per_week     String? // less than 30, 30+, etc.\n  job_size           String? // small, medium, large\n  freelancers_needed Int     @default(1)\n\n  // Experience Requirements\n  experience_level String @default(\"intermediate\") // entry, intermediate, expert\n\n  // Skills (stored as JSON arrays)\n  mandatory_skills    Json? // Array of skill objects\n  nice_to_have_skills Json? // Array of skill objects  \n  tools               Json? // Array of tool objects\n\n  // Additional Options\n  languages Json? // Array of language requirements\n\n  // Legacy fields (keep for backward compatibility)\n  regular_price Decimal? @db.Decimal(10, 2)\n  job_type      String   @default(\"Hourly\") // Hourly, Daily, Monthly, Yearly\n  thumb_image   String?\n\n  // System fields\n  buyer_id          String // Changed to String to match User.id\n  status            String   @default(\"active\") // active, inactive, completed\n  approved_by_admin String   @default(\"pending\") // pending, approved, rejected\n  featured          Boolean  @default(false)\n  created_at        DateTime @default(now())\n  updated_at        DateTime @updatedAt\n\n  // Relations\n  category     Category         @relation(fields: [category_id], references: [id])\n  city         City?            @relation(fields: [city_id], references: [id])\n  buyer        User             @relation(\"BuyerJobPosts\", fields: [buyer_id], references: [id])\n  applications JobApplication[]\n\n  @@map(\"job_posts\")\n}\n\nmodel JobApplication {\n  id             Int      @id @default(autoincrement())\n  job_post_id    Int\n  freelancer_id  String // Changed to String to match User.id\n  cover_letter   String   @db.Text\n  proposed_price Decimal  @db.Decimal(10, 2)\n  delivery_time  Int // in days\n  status         String   @default(\"pending\") // pending, approved, rejected, withdrawn\n  created_at     DateTime @default(now())\n  updated_at     DateTime @updatedAt\n\n  // Relations\n  job_post   JobPost @relation(fields: [job_post_id], references: [id], onDelete: Cascade)\n  freelancer User    @relation(\"FreelancerApplications\", fields: [freelancer_id], references: [id])\n\n  @@unique([job_post_id, freelancer_id]) // Prevent duplicate applications\n  @@map(\"job_applications\")\n}\n",
  "inlineSchemaHash": "9383e12477ced183c20b7d2fa0aea7b38ce652082832053bed1ff9c672c8b1b4",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"passwordHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"avatar\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"city_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"city\",\"kind\":\"object\",\"type\":\"City\",\"relationName\":\"CityToUser\"},{\"name\":\"job_posts\",\"kind\":\"object\",\"type\":\"JobPost\",\"relationName\":\"BuyerJobPosts\"},{\"name\":\"job_applications\",\"kind\":\"object\",\"type\":\"JobApplication\",\"relationName\":\"FreelancerApplications\"}],\"dbName\":null},\"Gig\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"gigTitle\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"shortDescription\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"thumbnailImage\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"galleryImages\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"deliveryTime\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"revisions\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"additionalNotes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Category\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updated_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"job_posts\",\"kind\":\"object\",\"type\":\"JobPost\",\"relationName\":\"CategoryToJobPost\"},{\"name\":\"specialties\",\"kind\":\"object\",\"type\":\"Specialty\",\"relationName\":\"CategoryToSpecialty\"}],\"dbName\":\"categories\"},\"City\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"country\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updated_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"job_posts\",\"kind\":\"object\",\"type\":\"JobPost\",\"relationName\":\"CityToJobPost\"},{\"name\":\"users\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CityToUser\"}],\"dbName\":\"cities\"},\"Skill\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updated_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"skills\"},\"Specialty\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updated_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"category\",\"kind\":\"object\",\"type\":\"Category\",\"relationName\":\"CategoryToSpecialty\"}],\"dbName\":\"specialties\"},\"JobPost\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"summary\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"deliverables\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"specialty\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"city_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"budget_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"hourly_rate_from\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"hourly_rate_to\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"fixed_price\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"project_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"hours_per_week\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"job_size\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"freelancers_needed\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"experience_level\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mandatory_skills\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"nice_to_have_skills\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"tools\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"languages\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"regular_price\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"job_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"thumb_image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"buyer_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"approved_by_admin\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"featured\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updated_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"category\",\"kind\":\"object\",\"type\":\"Category\",\"relationName\":\"CategoryToJobPost\"},{\"name\":\"city\",\"kind\":\"object\",\"type\":\"City\",\"relationName\":\"CityToJobPost\"},{\"name\":\"buyer\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"BuyerJobPosts\"},{\"name\":\"applications\",\"kind\":\"object\",\"type\":\"JobApplication\",\"relationName\":\"JobApplicationToJobPost\"}],\"dbName\":\"job_posts\"},\"JobApplication\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"job_post_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"freelancer_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"cover_letter\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"proposed_price\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"delivery_time\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updated_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"job_post\",\"kind\":\"object\",\"type\":\"JobPost\",\"relationName\":\"JobApplicationToJobPost\"},{\"name\":\"freelancer\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"FreelancerApplications\"}],\"dbName\":\"job_applications\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

