generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  client
  freelancer
  admin
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  passwordHash String
  role         Role     @default(client)
  avatar       String?
  city_id      Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  city             City?            @relation(fields: [city_id], references: [id])
  job_posts        JobPost[]        @relation("BuyerJobPosts")
  job_applications JobApplication[] @relation("FreelancerApplications")
}

model Gig {
  id               Int      @id @default(autoincrement())
  gigTitle         String
  category         String
  shortDescription String
  thumbnailImage   String?
  galleryImages    String[] // Postgres supports arrays
  price            Float
  deliveryTime     Int // Changed to Int
  revisions        Int // Changed to Int
  additionalNotes  String?
  createdAt        DateTime @default(now())
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String   @unique
  description String?
  image       String?
  status      String   @default("active") // active, inactive
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  job_posts   JobPost[]
  specialties Specialty[]

  @@map("categories")
}

model City {
  id         Int      @id @default(autoincrement())
  name       String
  country    String?
  status     String   @default("active") // active, inactive
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  job_posts JobPost[]
  users     User[]

  @@unique([name, country])
  @@map("cities")
}

model Skill {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  category   String // Programming Languages, Frameworks, Tools, etc.
  type       String   @default("skill") // skill, tool, language
  status     String   @default("active")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("skills")
}

model Specialty {
  id          Int      @id @default(autoincrement())
  name        String
  category_id Int
  status      String   @default("active")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  category Category @relation(fields: [category_id], references: [id])

  @@unique([name, category_id])
  @@map("specialties")
}

model JobPost {
  id           Int     @id @default(autoincrement())
  title        String
  slug         String  @unique
  summary      String? @db.Text
  description  String  @db.Text
  deliverables String? @db.Text
  category_id  Int
  specialty    String?
  city_id      Int?

  // Budget Information
  budget_type      String   @default("hourly") // hourly, fixed
  hourly_rate_from Decimal? @db.Decimal(10, 2)
  hourly_rate_to   Decimal? @db.Decimal(10, 2)
  fixed_price      Decimal? @db.Decimal(10, 2)

  // Project Details
  project_type       String  @default("one-time") // one-time, ongoing
  duration           String? // 1-3 months, 3-6 months, etc.
  hours_per_week     String? // less than 30, 30+, etc.
  job_size           String? // small, medium, large
  freelancers_needed Int     @default(1)

  // Experience Requirements
  experience_level String @default("intermediate") // entry, intermediate, expert

  // Skills (stored as JSON arrays)
  mandatory_skills    Json? // Array of skill objects
  nice_to_have_skills Json? // Array of skill objects  
  tools               Json? // Array of tool objects

  // Additional Options
  languages Json? // Array of language requirements

  // Legacy fields (keep for backward compatibility)
  regular_price Decimal? @db.Decimal(10, 2)
  job_type      String   @default("Hourly") // Hourly, Daily, Monthly, Yearly
  thumb_image   String?

  // System fields
  buyer_id          String // Changed to String to match User.id
  status            String   @default("active") // active, inactive, completed
  approved_by_admin String   @default("pending") // pending, approved, rejected
  featured          Boolean  @default(false)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  category     Category         @relation(fields: [category_id], references: [id])
  city         City?            @relation(fields: [city_id], references: [id])
  buyer        User             @relation("BuyerJobPosts", fields: [buyer_id], references: [id])
  applications JobApplication[]

  @@map("job_posts")
}

model JobApplication {
  id             Int      @id @default(autoincrement())
  job_post_id    Int
  freelancer_id  String // Changed to String to match User.id
  cover_letter   String   @db.Text
  proposed_price Decimal  @db.Decimal(10, 2)
  delivery_time  Int // in days
  status         String   @default("pending") // pending, approved, rejected, withdrawn
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relations
  job_post   JobPost @relation(fields: [job_post_id], references: [id], onDelete: Cascade)
  freelancer User    @relation("FreelancerApplications", fields: [freelancer_id], references: [id])

  @@unique([job_post_id, freelancer_id]) // Prevent duplicate applications
  @@map("job_applications")
}
